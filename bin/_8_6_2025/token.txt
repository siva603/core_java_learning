In java tokens are small elements which are understand by compile only.

token are -->   1. Keywords
				2. identifiers
				3. liters
				4. concatenation
				5. comments
				6. data types
				7. variable
				8. operators ...........
				
1. keywords : 
-------------------------------
1. keywords are predefined words which are used only used specific perpose.
2. keywords also called reserved words.
3. in java keywords above 50+
4. all keywords are in lower case.

note : true, false, null are not keywords these are values

example : 

	int is keywords. it is used only for declare int data types variable.
	
	
	
2. Identifiers :
=====================================================================================

1. identifiers are nothing but giving names for java components.
						or
	identifiers are used create names only
	
basic rules : 
------------

1. it shouldn't start with digits
	23vara(incorrect) --> vara23(correct)
	
2. it shouldn't contain spaces
	vara lakshmi(incorrect) --> vara_lakshmi(correct)
	
3. it shouldn't contain special characters except unerscore and doller symbol
	vara@# (incorrect) --> _vara or $vara (correct)
	
4. we shouldn't contain keywords	
	int(incorrect) --> Int(correct)
	
IT rules :(optional)
--------------------

1. camel case : staring word 1st letter small after next all words starting letter should capital
		
		used for : variable, methods
		
		example : varaLakshmi
		
2. pascal case : every word 1st letter should capital

		used for : class names, interface name

		example : HelloWorld 


===================================================================================

3. Liters : liters nothing but data or values

	liters are in java divided into 4 types
		
			1. Numbers ( 0-9)
			2. Characters ( which enclosed with single quotes only one character)
				example : 'x','$','@','-',......
				
			3. Strings ( which enclosed with double quotes)
				example : "x", "vara", "hello",..........
				
			4. Boolean ( true or false)
			
			
========================================================================================

4. concatenation : concatenation is nothing combing or merging two or more liters.

	ASCILL VALUES : 
	
		'a' -> 97
		'A' -> 65 AND 'Z' -> 90
		'0' -> 48 ....
		
	1. numbers + number     ->(addition) 3 + 4 = 7
	
	   numbers + characters  ->(addition) 6 + 'a' = 6 + 97 = 103
	  
	   numbers + String		->(concatenation) 40 + "vara" => "40vara"
	  
	   numbers + boolean		->(compile time error)-> incompatuble error
	  
	
  2.  characters + number     ->(addition) '0' + 4 => 48 + 4 = 52
	
	  characters + characters  ->(addition) 'a' + 'a' = 97 + 97 = 194
	  
	  characters + String		->(concatenation) 'a' + "vara" => "avara"
	  
	  characters + boolean		->(compile time error)-> incompatuble error
	  
	  
  3.  String + number       ->(concatenation) 3 + "vara" -> "3vara"
	
	  String + characters   ->(concatenation) 'a' + "vara" => "avara"
	  
	  String + String		->(concatenation) "varidi" + "vara" => "varidivara"
	  
	  String + boolean		-> (concatenation) "vara" + false => "varafalse"
	  
  
  4.  boolean + number       ->(compile time error)-> incompatuble error
	
	  boolean + characters   ->(compile time error)-> incompatuble error
	  
	  boolean + String		->(compile time error)-> incompatuble error
	  
	  boolean + boolean		->(compile time error)-> incompatuble error
	

======================================================================================

5. comments : comments are used we can represent the functionalities of block code
	if languages are comments supports that languages are high level languages
	
	1. single line comments
			example -> // this is my code
			
	2. multiline comments
		example -> /* this is addtion code */
		
=========================================================

6. datatypes in java -> data types are used we can specify the which type data we are going 
						to store in perticular variable.
						
	-> mainly data types are divided in two types
	
	1. primitive data types (performance high)
	2. non primitive data types ( we can achieve object oriented )

   1. primitive data types are : 
   
   -> all primitive data types are keywords
   -> primitive data types are predefined data types
   -> all primitive data have fixed memory
   
   		// these are used store only integers values			
  		1. byte(1 byte)
  		2. short (2 bytes)
  		3. int	( 4 bytes)
  		4. long (8 bytes)
  		
  		// these are used store only decimal numbers
  		5. float (4 bytes)
  		6. double ( 8 bytes)
  		
  		7. char (2 bytes)
  		8. boolean ( 1 bit) -> one bit is used to store either 0 or 1.
  		
   2. non-primitive data types are : 
   
   -> all non-primitive data types user defined data types.
   -> all classes are non-primitive data types
   example : String ....
   
   		
========================================================================

7. variable : variables are used give name for block of memory 

	identifiers are used to create names -> vara, vara20 ....
	
	// datatype variableName = value ;
	
	variables are used to give name for block of memory => int vara = 20;

-> variables are divided into two types based declaration:


	
	1. based on datatypes--> 
	
			1. primitive datatype variables
				syntax : primitive_datatype varialbleName = values;
								
			2. non-primtive datatypes variables
				syntax : non_primitive_datatype varialbleName = values;
	
	2. based on scope  --> 
			1. static variable (inside class and outside block)
				syntax : syntax : static datatype varialbleName = values;
				
			2. non-static variable(inside class and outside block)
			   syntax : datatype varialbleName = values;
			   
			3. local variable(inside block)
			   syntax : datatype varialbleName = values;

==============================================================================


OPERATORS IN JAVA : 
------------------
operators( +, -, /, *, % ...)
operands ( variables)

Operators are nothing special symbols which are used perform operations on operands

every operators have 2 functionalities.

	1. every operator returns result
	2. every operator have their own precedence(priority)
	
operators are divided into 2 types based on declaration
---------------------------------------------------

1. based on operands : based on operands operators are divided into three types
--------------------
	
	1. unary operator : a operator which is accept only one operand is called unary operator.
		example --> +variableName, -variableName, ++variableName, --variableName
		
	2. binary operator : a operator which is accept only two operands is called binary operator.
		example --> variableName + variableName
		
	3. ternary operator : a operator which is accept only three or more operands is called ternary operator.
		example --> condition ? true : false ;
		
		
2. based on operators : based on operators, operators are divided into 7 types.
---------------------

	1. Arithmetic operator : 
		-> this is used we can perform arithmetic operations on operands.
	
			int a = 10, b= 20;
			System.out.println(a + b);
			System.out.println(a - b);
			System.out.println(a * b);
			System.out.println(a / b);
			System.out.println(a % b);
	
	
	2. Assignment operator : 
	
		-> this operator is used we can assign value to a variable.
		this is divided into 2 types.
		
		1. single assignment operator : directly value assign to variable
		
					int b = 10;
					
		2. compound assignment operator : here 1st we perform arithmetic operation 
		after the result is assign to variable.( +=, -=, *=, /=, %= )
					int c = 10;
					 c = c + 20  or c += 20(compound assignment operator)
		
	3. Relational operator :( <, >, <=, >=, ==, != )
	
		this operator is used check relation on between two operators or we can build conditions.
						int a = 20, b=20;
						System.out.println(a > b);
			
			
	4. Logical operator    :( &&, ||, !)
		this operators are used we can multiple conditions
		
						 int a = 20, b=40;
						System.out.println(a < b && b > a);
		
	5. Ternary operator	   :
		this is used we can execute single statement based on condition
		
			int a = 20, b=20;
			int res = a < b ? a : b ;
			System.out.println(res);
			
	6. increment/decrement operator :
	
		this is used we can increase or decrease by one value
		
		1. post increment(a++): 1st value will be executed after incremented 
		2. pre increment(++a) : 1st value will be incremented after executed
		
		3. post decrement(a--): 1st value will be executed after decremented 
		4. pre decrement(--a) : 1st value will be decremented after executed
		
		 
	7. bitwise operator    :

		this operator is used we can perform bit manipulation.
		
		1. bitwise and operator
		------------------------------------------------------
		
					1 & 1 -> 1	 (AND TABLE)
					1 & 0 -> 0	
					0 & 1 -> 0	
					0 & 0 -> 0
					
					
				64	32	16 	8	4	2	1
				--------------------------
			int a = 5 ; 	0	1	0	1
			int b = 3 ; 	0	0	1	1
						-------------------
							0	0	0	1 ( value is 1 )
							
							
		
		2. bitwise or operator : 
		-------------------------------------------------
		
		
					1 | 1 -> 1	 (OR TABLE)
					1 | 0 -> 1	
					0 | 1 -> 1	
					0 | 0 -> 0
					
					
				64	32	16 	8	4	2	1
				--------------------------
			int a = 5 ; 	0	1	0	1
			int b = 3 ; 	0	0	1	1
						-------------------
							0	1	1	1 ( value is 7 )
		
		3. bitwise xor operator
		-------------------------------------------------
		
		
					1 ^ 1 -> 0	 (XOR TABLE)
					1 ^ 0 -> 1	
					0 ^ 1 -> 1	
					0 ^ 0 -> 0
					
					
				64	32	16 	8	4	2	1
				--------------------------
			int a = 5 ; 	0	1	0	1
			int b = 3 ; 	0	0	1	1
						-------------------
							0	1	1	0 ( value is 6 )
		
		4. bitwise left shift operator
		-------------------------------------------------
		
		--> for every left shift operator we should mutlify the value by 2
		
		int a = 3 ;
		
				64	32	16 	8	4	2	1
				--------------------------
			 				0	0	1	1
			
			
		a = a << 1	
				
				64	32	16 	8	4	2	1
				--------------------------
						0	0	1	1	0 ( after one left shift value (6))
						
		a = a<< 2 
				
				64	32	16 	8	4	2	1
				--------------------------
					0	0	1	1	0	0 ( after second left shift value (12))	
					
					
				64	32	16 	8	4	2	1
				--------------------------
				0	0	1	1	0	0	0 ( after third left shift value (24))	
						
						
			in simple way :
			-----------------
			
			if b = 4;
			
			b = b<<2 ; ( 4 * 2 = 8 
						8 * 2 = 16)
						
			final answer is 16.
			
				
		5. bitwise right shift operator
		-------------------------------------------------
		
		--> for every left shift operator we should divide the value by 2
		
		int a = 3 ;
		
				64	32	16 	8	4	2	1
				--------------------------
			 				0	0	1	1
			
			
		a = a >> 1	
				
				64	32	16 	8	4	2	1
				--------------------------
						0	0	0	1	1 ( after one left shift value (3))
						
		a = a>> 2 
				
				64	32	16 	8	4	2	1
				--------------------------
					0	0	0	0	0	1 ( after second left shift value (1))	
					
					
				64	32	16 	8	4	2	1
				--------------------------
				0	0	0	0	0	0	0 ( after third left shift value (0))	
						
						
			in simple way :
			-----------------
			
			if b = 16;
			
			b = b>>2 ; ( 16 / 2 = 8 
						8 / 2 = 4)
						
			final answer is 4.
			

		6. bitwise complement operator(~) : 
		------------------------------------
		
		bitwise operator is working based on formula that is -(n+1)

			int b = 10;
			int res = ~b 
			internally --> -(10+1) ----> -11
			
			System.out.println(res) // -11

