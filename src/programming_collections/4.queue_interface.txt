Queue (Interface)
-----------------

* `Queue` is an interface in the `java.util` package.
* It represents a **FIFO (First-In-First-Out)** collection.
* Elements are **added at the rear** and **removed from the front**.
* Does **not allow random access** like lists.
* Common implementations: `LinkedList`, `PriorityQueue`, `ArrayDeque`.



Queue Methods (from Queue Interface / Collection Interface)**
------------------------------------------------------------------


* `add(E e)` – Inserts element at the end; throws exception if full.
* `offer(E e)` – Inserts element at the end; returns `false` if full.
* `remove()` – Removes and returns the head; throws exception if empty.
* `poll()` – Removes and returns the head; returns `null` if empty.
* `element()` – Returns the head; throws exception if empty.
* `peek()` – Returns the head; returns `null` if empty.
* `contains(Object o)` – Checks if element exists in the queue.
* `isEmpty()` – Checks if queue is empty.
* `size()` – Returns number of elements in the queue.
* `iterator()` – Returns an iterator over the elements.
* `toArray()` – Converts queue to array.





# PriorityQueue
---------------


* `PriorityQueue` implements `Queue` and `Serializable` interfaces.
* It is in the `java.util` package.
* Elements are **ordered based on natural ordering** or a **custom Comparator**.
* It follows **FIFO only for elements with equal priority**.
* Does **not allow null** elements.
* Not synchronized (thread-unsafe).
* Duplicates are allowed.



### **Constructors**
---------------------


1. `PriorityQueue()` – Creates empty queue with default capacity 11.
2. `PriorityQueue(int initialCapacity)` – Creates empty queue with given capacity.
3. `PriorityQueue(int initialCapacity, Comparator c)` – Creates queue with capacity and custom comparator.
4. `PriorityQueue(Collection c)` – Creates queue with elements from a collection.
5. `PriorityQueue(PriorityQueue q)` – Creates queue from another priority queue.
6. `PriorityQueue(SortedSet s)` – Creates queue from a sorted set.



### **PriorityQueue Methods**
--------------------------------


* `add(E e)` – Adds element; throws exception if full.
* `offer(E e)` – Adds element; returns false if full.
* `remove()` – Removes and returns head; throws exception if empty.
* `poll()` – Removes and returns head; returns null if empty.
* `element()` – Returns head; throws exception if empty.
* `peek()` – Returns head; returns null if empty.
* `contains(Object o)` – Checks if element exists.
* `size()` – Returns number of elements.
* `isEmpty()` – Checks if empty.
* `iterator()` – Returns iterator (order not guaranteed).
* `toArray()` – Converts queue to array.
* `comparator()` – Returns comparator used or null for natural ordering.





import java.util.*;

public class EasyPriorityQueueDemo {

    // ----------------- ADD METHODS -----------------

    static void addExample() {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.add(30);
        pq.add(10);
        pq.add(20);
        System.out.println("add(): " + pq); 
        // Output (natural order, may vary in internal storage): [10, 30, 20]
    }

    static void offerExample() {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.offer(50);
        pq.offer(40);
        System.out.println("offer(): " + pq); 
        // Output: [40, 50]
    }

    // ----------------- REMOVE METHODS -----------------

    static void removeExample() {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.add(10);
        pq.add(20);
        pq.add(30);
        System.out.println("remove(): " + pq.remove()); 
        // Output: 10 (head element removed)
        System.out.println("Queue after remove(): " + pq); 
        // Output: [20, 30]
    }

    static void pollExample() {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.add(15);
        pq.add(5);
        System.out.println("poll(): " + pq.poll()); 
        // Output: 5
        System.out.println("Queue after poll(): " + pq); 
        // Output: [15]
    }

    // ----------------- ACCESS METHODS -----------------

    static void elementExample() {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.add(100);
        pq.add(50);
        System.out.println("element(): " + pq.element()); 
        // Output: 50
    }

    static void peekExample() {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.add(200);
        pq.add(150);
        System.out.println("peek(): " + pq.peek()); 
        // Output: 150
    }

    // ----------------- SEARCH METHODS -----------------

    static void containsExample() {
        PriorityQueue<String> pq = new PriorityQueue<>();
        pq.add("Apple");
        pq.add("Banana");
        System.out.println("contains(Banana): " + pq.contains("Banana")); 
        // Output: true
    }

    // ----------------- MISCELLANEOUS -----------------

    static void sizeIsEmptyExample() {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.add(1);
        pq.add(2);
        System.out.println("size(): " + pq.size()); // Output: 2
        System.out.println("isEmpty(): " + pq.isEmpty()); // Output: false
    }

    static void iteratorToArrayExample() {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.add(5);
        pq.add(10);
        Iterator<Integer> it = pq.iterator();
        System.out.print("iterator(): ");
        while(it.hasNext()) {
            System.out.print(it.next() + " ");
        }
        System.out.println();
        Object[] arr = pq.toArray();
        System.out.println("toArray(): " + Arrays.toString(arr));
    }

    static void comparatorExample() {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        System.out.println("comparator(): " + pq.comparator()); 
        // Output: null (natural ordering)
    }

    // ----------------- MAIN -----------------

    public static void main(String[] args) {
        addExample();
        offerExample();

        removeExample();
        pollExample();

        elementExample();
        peekExample();

        containsExample();

        sizeIsEmptyExample();
        iteratorToArrayExample();
        comparatorExample();
    }
}
